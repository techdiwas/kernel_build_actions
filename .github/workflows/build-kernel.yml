name: Build kernels

on:
  workflow_dispatch:

jobs:
  Read-configuration:
    name: üêÇ Parse *.config.json
    runs-on: ubuntu-20.04
    outputs:
      CONFIGS: ${{ steps.generate-matrix.outputs.CONFIGS }}
      BUILD_DATE: ${{ steps.generate-builddate.outputs.BUILDDATE }}
    steps:
      - name: üòÑ Checkout
        uses: actions/checkout@v4

      - name: üòÜ Generate Matrix
        id: generate-matrix
        run: |
          echo "CONFIGS<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' kernel/configs/*.config.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ‚è∞ Set builddate
        id: generate-builddate
        run: echo "BUILDDATE=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-20.04
    needs:
      - Read-configuration
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        CONFIG: ${{ fromJSON(needs.Read-configuration.outputs.CONFIGS) }}
    env:
      WORKSPACE: ${{ github.workspace }}
      BUILD_DATE: "${{ needs.Read-configuration.outputs.BUILD_DATE }}"
      KERNEL_NAME: ${{ matrix.CONFIG.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.CONFIG.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.CONFIG.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.CONFIG.kernelSource.device }}
      KERNEL_DEFCONFIG_PATH: ${{ matrix.CONFIG.kernelSource.defconfig }}
      ENABLE_CCACHE: ${{ matrix.CONFIG.enableCcache }}
      USE_ANYKERNEL3: ${{ matrix.CONFIG.AnyKernel3.use }}
      CONFIRM_RELEASE: ${{ matrix.CONFIG.AnyKernel3.release }}
      ENABLE_KERNELSU: ${{ matrix.CONFIG.enableKernelSU }}
      OUT_DIR: "${{ github.workspace }}/out"
      CCACHE_DIR: "${{ github.workspace }}/ccache"

    steps:
      - name: üìê Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: üòÑ Checkout
        uses: actions/checkout@v4

      - name: üåü Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential bc flex bison libssl-dev libelf-dev \
            zip unzip tar gzip bzip2 rar unrar lzop \
            git ccache curl wget libarchive-tools \
            pngcrush schedtool dpkg-dev device-tree-compiler \
            libncurses5-dev lib32z1-dev libx11-dev libgl1-mesa-dev \
            libxml2-utils libbz2-dev squashfs-tools \
            gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi

      - name: üêç Setup Python 2.7
        uses: actions/setup-python@v5
        with:
          python-version: '2.7'

      - name: üöÑ Setup ccache
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        id: hash
        run: |
          mkdir -p ${{ env.OUT_DIR }}
          ccache -o compression=false -o cache_dir=${{ env.CCACHE_DIR }}
          HASH=$(echo -n '${{ toJSON(matrix.config) }}' | openssl dgst -sha1 | awk '{print $2}')
          echo "HASH=$HASH" >> $GITHUB_OUTPUT

      - name: üöÖ Cache ccache & output
        if: ${{ env.ENABLE_CCACHE == 'true' }}
        uses: actions/cache@v3
        env:
          HASH: ${{ steps.hash.outputs.HASH }}
        with:
          path: |
            ${{ env.OUT_DIR }}
            ${{ env.CCACHE_DIR }}
          key: cache-${{ env.KERNEL_NAME }}-${{ env.HASH }}-${{ env.BUILD_DATE }}
          restore-keys: |
            cache-${{ env.KERNEL_NAME }}-${{ env.HASH }}-
            cache-${{ env.KERNEL_NAME }}-

      - name: üåü Clone kernel source
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch ${{ env.KERNEL_BRANCH }} ${{ env.KERNEL_REPO }} ${{ env.KERNEL_NAME }}

      - name: üí´ Get toolchains
        env:
          toolchains: "${{ toJSON(matrix.CONFIG.toolchains) }}"
        run: |
          num=$(echo $toolchains | jq 'length')
          echo "ü§î Found $num toolchains."

          for ((i=0;i<num;i++)); do
            tc=$(echo $toolchains | jq -r ".[$i]")
            name=$(echo $tc | jq -r ".name")

            if echo $tc | jq -e 'has("url")' > /dev/null; then
              url=$(echo $tc | jq -r ".url")
              mkdir -p "$name"
              wget "$url"
              file="${url##*/}"

              case "$file" in
                *.zip) unzip -d $name "$file" ;;
                *.tar) tar xvf "$file" -C $name ;;
                *.tar.gz) tar zxvf "$file" -C $name ;;
                *.rar) unrar x "$file" $name ;;
                *) echo "Unknown file type: $file" ;;
              esac
              rm "$file"
              echo "‚úÖ Downloaded $name"
            else
              repo=$(echo $tc | jq -r ".repo")
              branch=$(echo $tc | jq -r ".branch")
              git clone --recursive --depth=1 -j $(nproc) --branch $branch $repo $name
              echo "‚úÖ Cloned $name"
            fi

            jq -r ".binaryEnv[]" <<< "$tc" | while read -r path; do
              echo "${{ env.WORKSPACE }}/$name/$path" >> $GITHUB_PATH
            done
          done

      - name: üòé Set build args
        id: generate-args
        env:
          PARAMS: "${{ toJSON(matrix.CONFIG.params) }}"
          THREAD: $(nproc --all)
        run: |
          ARCH=$(echo $PARAMS | jq -r ".ARCH")
          CC=$(echo $PARAMS | jq -r ".CC")
          args="-j${THREAD} O=${{ env.OUT_DIR }} ARCH=$ARCH"

          if [ -n "$CC" ]; then
            if [[ "$CC" == *"/"* ]]; then
              CC=${{ env.WORKSPACE }}/$CC
            fi
            if [ ${{ env.ENABLE_CCACHE }} = true ]; then
              args="$args CC=\"ccache $CC\""
            else
              args="$args CC=$CC"
            fi
          fi

          jq -r '.externalCommands | to_entries[] | "\(.key)=\(.value)"' <<< "$PARAMS" | while read -r cmd; do
            key=$(echo "$cmd" | cut -d= -f1)
            value=$(echo "$cmd" | cut -d= -f2)
            [[ "$value" == *"/"* ]] && value="${{ env.WORKSPACE }}/$value"
            args="$args $key=$value"
          done

          echo "ARCH=$ARCH" >> $GITHUB_OUTPUT
          echo "ARGS=$args" >> $GITHUB_OUTPUT

      - name: üòã Setup KernelSU
        if: ${{ env.ENABLE_KERNELSU == 'true' }}
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          rm -rf ./KernelSU ./drivers/kernelsu
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v0.9.5

          echo "CONFIG_KPROBES=y" >> arch/${ARCH}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_HAVE_KPROBES=y" >> arch/${ARCH}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}
          echo "CONFIG_KPROBE_EVENTS=y" >> arch/${ARCH}/configs/${{ env.KERNEL_DEFCONFIG_PATH }}

      - name: üëç Start building the kernel
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          ARGS: ${{ steps.generate-args.outputs.ARGS }}
        run: |
          export KBUILD_BUILD_HOST=Github-Action
          export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
          make ${{ env.ARGS }} ${{ env.KERNEL_DEFCONFIG_PATH }}
          make ${{ env.ARGS }}

      - name: üì¶ Upload kernel outputs
        uses: actions/upload-artifact@v4
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: ${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}-Output
          path: |
            ${{ env.OUT_DIR }}/arch/${ARCH}/boot/Image*
            ${{ env.OUT_DIR }}/arch/${ARCH}/boot/dtb*
            ${{ env.OUT_DIR }}/arch/${ARCH}/boot/dtbo*
          retention-days: 7

      - name: ‚è∞ Pack Anykernel3
        if: ${{ env.USE_ANYKERNEL3 == 'true' }}
        env:
          PARAMS: "${{ toJSON(matrix.CONFIG.AnyKernel3) }}"
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
          ANYKERNEL3_FILE: "${{ env.WORKSPACE }}/AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        run: |
          if echo -n '${{ env.PARAMS }}' | jq -e 'has("custom")' > /dev/null; then
            CUSTOM=$(echo -n '${{ env.PARAMS }}' | jq -r ".custom")
            REPO=$(echo $CUSTOM | jq -r ".repo")
            BRANCH=$(echo $CUSTOM | jq -r ".branch")
            git clone --recursive --depth=1 -j $(nproc) --branch $BRANCH $REPO AnyKernel3
          else
            git clone --recursive --depth=1 -j $(nproc) https://github.com/osm0sis/AnyKernel3 AnyKernel3
            sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
            sed -i 's!BLOCK=.*;!BLOCK=auto;!g' AnyKernel3/anykernel.sh
            sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
          fi

          cp -f ${{ env.OUT_DIR }}/arch/${ARCH}/boot/Image* ./AnyKernel3/ || true
          cp -f ${{ env.OUT_DIR }}/arch/${ARCH}/boot/dtb* ./AnyKernel3/ || true
          cp -f ${{ env.OUT_DIR }}/arch/${ARCH}/boot/dtbo* ./AnyKernel3/ || true

          cd AnyKernel3
          zip -q -r "${{ env.ANYKERNEL3_FILE }}.zip" *

      - name: üíæ Upload AnyKernel3 image
        if: ${{ env.USE_ANYKERNEL3 == 'true' }}
        uses: actions/upload-artifact@v4
        env:
          ANYKERNEL3_FILE: "AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        with:
          name: "${{ env.ANYKERNEL3_FILE }}"
          path: AnyKernel3/*

      - name: üßß Create GitHub Release
        if: ${{ env.USE_ANYKERNEL3 == 'true' && env.CONFIRM_RELEASE == 'true' }}
        uses: softprops/action-gh-release@v1
        env:
          ANYKERNEL3_FILE: "${{ env.WORKSPACE }}/AnyKernel3-${{ env.KERNEL_NAME }}-${{ env.BUILD_DATE }}"
        with:
          tag_name: v${{ env.BUILD_DATE }}.${{ github.run_number }}
          files: "${{ env.ANYKERNEL3_FILE }}.zip"
          generate_release_notes: true
